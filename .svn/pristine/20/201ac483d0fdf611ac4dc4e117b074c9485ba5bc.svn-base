package cn.nsu.edu.web.four.filters;

import cn.nsu.edu.web.four.config.BaseStatic;
import cn.nsu.edu.web.four.enums.Role;
import cn.nsu.edu.web.four.utils.http.RequestUtil;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.util.StringUtils;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsFileUploadSupport;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.*;

public class XssFilter extends OncePerRequestFilter {
    private XSSRequestWrapper xssRequestWrapper;

    @Override
    protected void initFilterBean() throws ServletException {
        XSSRequestWrapper.compile();
        log.info("开始初始化过滤器");
    }

    private final Log log = LogFactory.getLog(getClass());

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        if (ServletFileUpload.isMultipartContent(request)) {
            XSSFormRequest xssRequestWrapper = new XSSFormRequest(request);
            filterChain.doFilter(xssRequestWrapper, response);
        } else {
            XSSRequestWrapper xssRequestWrapper = new XSSRequestWrapper(request);
            filterChain.doFilter(xssRequestWrapper, response);
        }



    }

    private String determineEncoding(String contentTypeHeader, String defaultEncoding) {
        if (!StringUtils.hasText(contentTypeHeader)) {
            return defaultEncoding;
        } else {
            MediaType contentType = MediaType.parseMediaType(contentTypeHeader);
            Charset charset = contentType.getCharset();
            return charset != null ? charset.name() : defaultEncoding;
        }
    }

}
