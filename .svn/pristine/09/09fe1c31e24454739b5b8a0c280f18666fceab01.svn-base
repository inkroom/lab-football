package cn.nsu.edu.web.four.controllers.referee;

import cn.nsu.edu.web.four.annotation.Security;
import cn.nsu.edu.web.four.beans.match.Match;
import cn.nsu.edu.web.four.beans.referee.PlayerDescription;
import cn.nsu.edu.web.four.beans.referee.Report;
import cn.nsu.edu.web.four.dto.ctv.MessageDto;
import cn.nsu.edu.web.four.dto.stc.referee.ScheduleInformationDto;
import cn.nsu.edu.web.four.enums.Result;
import cn.nsu.edu.web.four.enums.Role;
import cn.nsu.edu.web.four.exception.RollbackException;
import cn.nsu.edu.web.four.services.match.MatchService;
import cn.nsu.edu.web.four.services.referee.RefereeService;
import cn.nsu.edu.web.four.services.referee.ReportService;
import cn.nsu.edu.web.four.utils.http.RequestUtil;
import cn.nsu.edu.web.four.utils.string.ParseUtil;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/referee/")
public class ReportController {

    @Autowired
    private HttpServletRequest request;
    @Autowired
    private MatchService matchService;
    @Autowired
    private ReportService service;
    @Autowired
    private ObjectMapper mapper;
    @Autowired
    private RefereeService refereeService;

    private Logger log = LoggerFactory.getLogger(getClass());

    @RequestMapping(value = "/report", method = RequestMethod.GET)
    @Security(roles = Role.REFEREE)
    public String index() throws Exception {
        Map<String, Object> loginMap = RequestUtil.getLogin(request);
        Integer matchId = ParseUtil.parseInt(loginMap.get("matchId").toString());
        Integer schId = ParseUtil.parseInt(loginMap.get("schId").toString());
        //获取赛事名称
        Match match = matchService.getMatchInfoById(matchId);

        //获取赛程信息
        ScheduleInformationDto information = refereeService.getScheduleInformation(schId);

//        Schedule schedule = service.getSchedule(schId);
        log.info("赛程信息=" + information);

        if (match == null || information == null || information.getScheduleInformation() == null) {
            return "common/404";
        }
        // TODO: 18-3-23 添加拦截器对赛程状态进行拦截，赛程已结束的情况下不允许继续操作
        if (information.getScheduleInformation().getStatus() == 2) {//赛程已结束，报告书提交完成
            return "common/405";
        }

        //获取出场球员信息
        List<PlayerDescription> players = service.getPlayers(schId);
        if (players == null) {
            log.info("没有获取到出场球员信息");
        } else {
            request.setAttribute("players", players);
            log.info("获取到的球员=" + players.toString());
        }
        //获取裁判员信息
        request.setAttribute("phone", loginMap.get("phone"));
        request.setAttribute("name", loginMap.get("name"));

        request.setAttribute("match", match);
        request.getSession().setAttribute("schedule", information);
        return "referee/report";
    }

    @RequestMapping(value = "/report", method = RequestMethod.POST)
    @Security(roles = Role.REFEREE, checkToken = true)
    @ResponseBody
    public MessageDto report(String playerJson, Report report) {

        try {
            List<PlayerDescription> list = mapper.readValue(playerJson, mapper.getTypeFactory().constructParametricType(ArrayList.class, PlayerDescription.class));

//            if (service.addReport(report, list,request.getSession().getAttribute("schedule"))) {
//                return new MessageDto(Result.SUCCESS);
//            }
            return new MessageDto(Result.FAIL);
        } catch (IOException e) {
//            e.printStackTrace();
            return new MessageDto(Result.PARAM_NOT_SUIT);
        } catch (RollbackException e) {
            return new MessageDto(Result.FAIL);
        }

//        log.info("list = " + playerJson);
//        return new MessageDto(Result.SUCCESS);
    }
}
