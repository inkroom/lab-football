package cn.nsu.edu.web.four.controllers.coath;

import cn.nsu.edu.web.four.annotation.Security;
import cn.nsu.edu.web.four.beans.coach.Coach;
import cn.nsu.edu.web.four.config.BaseStatic;
import cn.nsu.edu.web.four.dto.ctv.MessageDto;
import cn.nsu.edu.web.four.enums.Result;
import cn.nsu.edu.web.four.enums.Role;
import cn.nsu.edu.web.four.services.coach.CoachService;
import cn.nsu.edu.web.four.services.common.UploadService;
import cn.nsu.edu.web.four.utils.http.RequestUtil;
import cn.nsu.edu.web.four.utils.string.ParseUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

/**
 * @program: four
 * @description:
 * @author: ZhuShengpeng
 * @create: 2018-03-21 20:35
 **/

@Controller
@RequestMapping("/coach/")
public class CoachController {

    @Autowired
    public CoachService coachService;

    @Autowired
    private HttpServletRequest request;

    @Autowired
    private UploadService uploadService;

//    @Security(createToken = true)
//    @ModelAttribute
//    public void setRequest() {
//        Map<String, Object> account = new HashMap<>();
//        account.put(BaseStatic.KEY_ORGANIZATION_ID, "10000");
//        RequestUtil.login(request, account, Role.SCHOOL);
//    }


    //向前端返回全部教练信息并跳转至“全部教练页”(用学校id读取这个学校的全部教练)
    @RequestMapping(value = "getAllCoach/{status:[0-1]}", method = RequestMethod.GET)
    @Security(roles = Role.SCHOOL)
//    @Security
    public String getAllCoach(@PathVariable("status") Integer status, Model model) {

        if (status == 0 || status == 1) {
            Map<String, Object> logingMap = RequestUtil.getLogin(request);
            Integer org_id = ParseUtil.parseInt(logingMap.get(BaseStatic.KEY_ORGANIZATION_ID).toString());

            model.addAttribute("allCoach", coachService.getAllCoach(org_id, status));
            model.addAttribute("org_id", org_id);
            return "coach/coach_list";
        } else {
            return "common/404";
        }
    }

    //向前端返回单个教练信息并跳转至“教练具体信息页”（用教练id获取这个教练的全部信息）
    @RequestMapping(value = "getCoach/{id_coach:[0-9]{5}$}", method = RequestMethod.GET)
    @Security(roles = Role.SCHOOL)
//    @Security
    public String getCoach(@PathVariable("id_coach") Integer idCoach, Model model) {
        if (idCoach >= 50000 && idCoach <= 99999) {
            Map<String, Object> logingMap = RequestUtil.getLogin(request);
            Integer org_id = ParseUtil.parseInt(logingMap.get(BaseStatic.KEY_ORGANIZATION_ID).toString());

            Coach coach = coachService.getCoach(idCoach);

            if (coach.getOrgId().equals(org_id)) {
                model.addAttribute("coach", coach);
                model.addAttribute("coachTeam", coachService.getAllTeamByCoach(idCoach));
                return "coach/coach_info";
            }
        }
        return "common/404";
    }

//    //带着学校id至添加教练浮框（添加教练时自动添加学校id）
//    @RequestMapping(value="addCoachPage/{org_id}",method = RequestMethod.GET)
//    public int addCoachPage(@PathVariable("org_id")Integer org_id,Map<String,Object> map) {
//        map.put("org_id",org_id);
//        map.put("coach",new Coach());
//        return "";
//    }

    //添加教练信息
    @ResponseBody
    @RequestMapping(value = "addCoach", method = RequestMethod.POST)
    @Security(roles = Role.SCHOOL, checkToken = true)
//    @Security(checkToken = true)
    public MessageDto addCoach(@RequestParam("files") CommonsMultipartFile file, @Validated Coach coach, BindingResult result) {
        Map<String, Object> logingMap = RequestUtil.getLogin(request);
        Integer org_id = ParseUtil.parseInt(logingMap.get(BaseStatic.KEY_ORGANIZATION_ID).toString());

        if (coach.getOrgId().equals(org_id) && result.getFieldError() == null) {

            String photo = uploadService.upload(file, request, 204800);
            if (photo != null) {
                coach.setPhoto(photo);
                int i = coachService.addCoach(coach);
                if (i == 1) {
                    return new MessageDto(Result.SUCCESS);
                }
            }
        }
        return new MessageDto(Result.FAIL);
    }

//    @ResponseBody
//    @RequestMapping(value = "addCoach2", method = RequestMethod.POST)
//    public MessageDto addCoach2(@RequestParam("files") CommonsMultipartFile file, Coach coach) {
//        System.out.println(coach.toString());
//        if (file != null) {
//            System.out.println(file.getOriginalFilename());
//            return new MessageDto((Result.SUCCESS));
//        }
//        return new MessageDto(Result.FAIL);
//    }

    //修改教练基础信息
    @ResponseBody
    @RequestMapping(value = "updateCoach", method = RequestMethod.POST)
    @Security(roles = Role.SCHOOL, checkToken = true)
//    @Security(checkToken = true)
    public MessageDto updateCoach(@RequestParam("files") CommonsMultipartFile file, @Validated Coach coach, BindingResult result) {

        Map<String, Object> logingMap = RequestUtil.getLogin(request);
        Integer org_id = ParseUtil.parseInt(logingMap.get(BaseStatic.KEY_ORGANIZATION_ID).toString());
        if (coachService.getCoach(coach.getIdCoach()).getOrgId().equals(org_id) && result.getFieldError() == null) {
            int i = coachService.updateCoach(coach);
            if (i == 1) {
                return new MessageDto(Result.SUCCESS);
            }
        }
        return new MessageDto(Result.FAIL);
    }


    //修改教练状态
    @ResponseBody
    @RequestMapping(value = "coachStatus", method = RequestMethod.POST)
//    @Security(checkToken = true)
    @Security(roles = Role.SCHOOL, checkToken = true)
    public MessageDto coachStatus(Integer idCoach) {
        Map<String, Object> logingMap = RequestUtil.getLogin(request);
        Integer org_id = ParseUtil.parseInt(logingMap.get(BaseStatic.KEY_ORGANIZATION_ID).toString());

        if (coachService.getCoach(idCoach).getOrgId().equals(org_id)) {
            int i = coachService.coachStatus(idCoach);
            if (i == 1) {
                return new MessageDto(Result.SUCCESS);
            }
        }
        return new MessageDto(Result.FAIL);
    }

}
