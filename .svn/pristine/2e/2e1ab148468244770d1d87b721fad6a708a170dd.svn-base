package com.nsu.controller.student.practice;

import com.nsu.bean.common.AjaxBean;
import com.nsu.bean.student.exercise.PracticeSearchBean;
import com.nsu.bean.student.exercise.QuestionBean;
import com.nsu.common.Anonymous;
import com.nsu.common.annotation.InterceptorAnno;
import com.nsu.controller.BaseController;
import com.nsu.service.student.practice.PracticeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

/**
 * @author 墨盒
 * @version 1.0
 * @date 2017/7/13
 * @time 17:12
 * @Description 练习功能controller
 */
@Controller
@RequestMapping("/student/practice/")
public class PracticeController extends BaseController implements Anonymous {
    private static final String KEY_QUESTION = "_question_";

    @Autowired
    private HttpSession session;
    @Autowired
    private HttpServletRequest request;
    @Autowired
    private PracticeService service;

    @RequestMapping("{type}/index")
    @InterceptorAnno(createToken = true)
    public String toIndex(@PathVariable String type) {
        request.setAttribute("type", type);
        return "student/practice";
    }

    @RequestMapping("search")
    @ResponseBody
    @InterceptorAnno(checkToken = true, isAjax = true)
    public AjaxBean search(PracticeSearchBean search) {
        AjaxBean ajax = checkForm(search);
        if (ajax != null && "500".equals(ajax.getStatus()))
            return ajax;
        try {
            ajax = new AjaxBean();
            QuestionBean question = service.getOneQuestion(search);
            session.setAttribute(KEY_QUESTION, question);
            ajax.put("question", question);
            ajax.setStatus("200");
            return ajax;
        } catch (Exception e) {
            log.error(e.getMessage());
            e.printStackTrace();
            return new AjaxBean("500", "服务器异常，请重试");
        }
    }

    @RequestMapping("commit")
    @InterceptorAnno(checkToken = true, isAjax = true)
    @ResponseBody
    public AjaxBean commit(String key) {
        AjaxBean ajax = new AjaxBean();
        ajax.setStatus("500");
        try {
            Boolean isRight = service.checkAnswer(((QuestionBean) session.getAttribute(KEY_QUESTION)).getId(), key);
            if (isRight == null) {
                ajax.setMsg("指定题目不存在！");
            } else {
                ajax.setStatus("200");
                ajax.put("result", isRight);
            }
        } catch (Exception e) {
            log.error(e.getMessage());
            ajax.setMsg("服务器异常，请重试");
            e.printStackTrace();
        }
        return ajax;
    }

    @RequestMapping("get_answer")
    @InterceptorAnno(checkToken = true, isAjax = true)
    @ResponseBody
    public AjaxBean getAnswer() {
        AjaxBean ajax = new AjaxBean("200");
        ajax.put("answer", ((QuestionBean) session.getAttribute(KEY_QUESTION)).getAnswer());
        return ajax;
    }

}
