package cn.nsu.edu.web.four.controllers.schedule;

import cn.nsu.edu.web.four.beans.organization.Organization;
import cn.nsu.edu.web.four.beans.schedule.Schedule;
import cn.nsu.edu.web.four.beans.teams.Team;
import cn.nsu.edu.web.four.dto.ctv.MessageDto;
import cn.nsu.edu.web.four.enums.Result;
import cn.nsu.edu.web.four.services.match.MatchService;
import cn.nsu.edu.web.four.services.schedule.impl.ScheduleServiceImpl;
import cn.nsu.edu.web.four.services.team.FindInfoService;
import cn.nsu.edu.web.four.utils.Page;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.List;


/**
 * Created by 灵魂都在冒香气的神 on 2018/3/19.
 */
@Controller
@RequestMapping("/schedule")
public class ScheduleController
{
    @Resource(name = "schedule")
    private ScheduleServiceImpl service;
    @Autowired
    private MatchService matchService;
    @Autowired
    private FindInfoService teamService;

    private Logger log = LoggerFactory.getLogger(getClass());

    /*
            新增赛程
     */
    @ResponseBody
    @RequestMapping(value = "/create", method = RequestMethod.POST)
    public MessageDto create(Schedule schedule)
    {
        if (schedule!=null)
        {
            Integer level=matchService.getLevel(schedule.getMatchId());
            schedule.setLevel(level);
            schedule.setStatus(0);
            System.out.println("==============================");
            System.out.println(schedule);
            System.out.println("==============================");
            if (service.createSchedule(schedule))
            {
                return new MessageDto(Result.SUCCESS);
            }
        }
        return new MessageDto(Result.EXCEPTION);
    }

    /*
            获取机构列表
     */
    @ResponseBody
    @RequestMapping(value = "/showMechanism",method = RequestMethod.GET,produces = "application/json;charset=utf-8")
    public MessageDto showMechanism(@RequestParam(name = "matchId") Integer matchId)
    {
        System.out.println("============================================================");
        System.out.println("matchId:" + matchId);
        System.out.println("============================================================");
        List<Organization> list = matchService.getMatchOrgList(matchId);
        if (list==null)
        {
            return  new MessageDto(Result.EXCEPTION);
        }
        MessageDto dto=new MessageDto(Result.SUCCESS);
        dto.put("orgs", list);
        return dto;
    }

    /*
            根据机构列表获取获取队伍列表
     */
//    @ResponseBody
//    @RequestMapping(value = "/team",method = RequestMethod.GET,produces = "application/json;charset=utf-8")
//    public MessageDto showTeam(@RequestParam(name = "orgId",defaultValue = "-1") Integer orgId)
//    {
//        if (orgId ==-1)
//        {
//            return new MessageDto(Result.EXCEPTION);
//        }
////        List<CurrentTeam> list=service.getTeam(orgId);
//        if (list==null)
//        {
//            return new MessageDto(Result.EXCEPTION);
//        }
//        MessageDto dto=new MessageDto(Result.SUCCESS);
//        dto.put("team",list);
//        return dto;
//    }


    /*
            根据ID修改赛程
     */
    @ResponseBody
    @RequestMapping(value = "/modify",method = RequestMethod.POST,produces = "application/json;charset=utf-8")
    public MessageDto modify(@RequestBody Schedule schedule)
    {
        if (schedule==null||(!service.modifySchedule(schedule)))
        {
            return new MessageDto(Result.EXCEPTION);
        }
        return new MessageDto(Result.SUCCESS);
    }


    /*
            根据ID删除赛程
     */
    @ResponseBody
    @RequestMapping(value = "/delete",method = RequestMethod.POST,produces = "application/json;charset=utf-8")
    public MessageDto delete(@RequestParam(name = "idSchedule",defaultValue = "-1")Integer idSchedule)
    {
        if (idSchedule==-1||(!service.deleteSchedule(idSchedule)))
        {
            return new MessageDto(Result.EXCEPTION);
        }
        return new MessageDto(Result.SUCCESS);
    }

    /*
            根据赛事ID获取获取赛程列表
     */
    @ResponseBody
    @RequestMapping(value = "/showSchedule/{page}",method = RequestMethod.POST,produces = "application/json;charset=utf-8")
    public MessageDto showSchedule(@RequestParam(name = "idMatch",defaultValue = "-1")Integer idMatch,@PathVariable Integer page)
    {
        if (idMatch==-1)
        {
            return new MessageDto(Result.EXCEPTION);
        }
        List<Schedule> list=service.getScheduleByMatchID(idMatch);
        if (list==null)
        {
            return new MessageDto(Result.EXCEPTION);
        }
        List<Schedule> childList=new Page<Schedule>().subList(list,page);
        for (int i = 0, len = childList.size(); i < len; i++)
        {
            int teamA = childList.get(i).getTeamA();
            int teamB = childList.get(i).getTeamB();
            try
            {
                Team teamInfoA = teamService.findTeamInfo(teamA);
                Team teamInfoB = teamService.findTeamInfo(teamB);
                childList.get(i).setTeamNameA(teamInfoA.getName());
                childList.get(i).setTeamNameB(teamInfoB.getName());
            }
            catch (Exception e)
            {
                childList.get(i).setTeamNameA("无法获取队伍信息");
                childList.get(i).setTeamNameB("无法获取队伍信息");
            }
        }
        MessageDto dto=new MessageDto();
        dto.put("schedule",childList);
        dto.put("size",list.size());   //赛程总数目
        return dto;
    }

    /*
                根据赛事ID获取获取机构下所有队伍列表
     */
//    @ResponseBody
//    @RequestMapping(value = "/getTeam", method = RequestMethod.GET, produces = "application/json;charset=utf-8")
//    public MessageDto getTeamByMatch(@RequestParam(name = "matchId", defaultValue = "-1") Integer matchId)
//    {
//        Integer orgId = null;
//        if ((matchId == -1) || ((orgId = service.getOrgIdByMatch(matchId)) == null))
//        {
//            return new MessageDto(Result.EXCEPTION);
//        }
//        return showTeam(orgId);
//    }

    /*
                转发，中间
     */
    @RequestMapping(value = "/modifyPage", method = RequestMethod.GET)
    public String modifyPage(@RequestParam("idSchedule") Integer idSchedule, @RequestParam("match") Integer match, Model model)
    {
        model.addAttribute("idSchedule", idSchedule);
        model.addAttribute("match", match);
        return "/match/matchDetailsAdmin";
    }

    /**
     * @param matchId 赛事Id
     * @return 机构List包含id和name
     * @author Xuing
     * @description 通过赛事Id查询出该赛事中审核通过的机构列表
     * @date 2018-3-29 16:53:34
     */
    @ResponseBody
    @RequestMapping(value = "/showOrgs/{matchId:[1-9]+[0-9]*}")
    public MessageDto showMatchOrgs(@PathVariable Integer matchId) {
        log.info("========================================");
        log.info("matchId" + matchId);
        log.info("========================================");
        List<Organization> orgs = matchService.getMatchOrgList(matchId);
        MessageDto dto = new MessageDto(Result.SUCCESS);
        dto.put("orgs", orgs);
        return dto;
    }

    /**
     * @param matchId 赛事Id
     * @return 机构List包含id和name
     * @author Xuing
     * @description 通过赛事Id查询出该赛事中审核通过的机构列表
     * @date 2018-3-29 16:53:34
     */
    @ResponseBody
    @RequestMapping(value = "/showTeams/{matchId:[1-9]+[0-9]*}/{orgId:[1-9]+[0-9]*}")
    public MessageDto showMatchTeamByOrgId(@PathVariable Integer matchId, @PathVariable Integer orgId) {
        List<Team> teams = matchService.getMatchStaffTeamList(matchId, orgId);
        MessageDto dto = new MessageDto(Result.SUCCESS);
        dto.put("teams", teams);
        return dto;
    }
}

