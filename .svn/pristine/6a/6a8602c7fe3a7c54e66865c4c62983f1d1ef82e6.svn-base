package cn.nsu.edu.web.four.controllers.team;

import cn.nsu.edu.web.four.beans.player.Player;
import cn.nsu.edu.web.four.beans.teams.CoachInfo;
import cn.nsu.edu.web.four.beans.teams.PlayerCondition;
import cn.nsu.edu.web.four.services.team.CoachInfoService;
import cn.nsu.edu.web.four.services.team.PlayerService;
import com.sun.org.apache.xpath.internal.operations.Bool;
import org.apache.ibatis.annotations.Param;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * @author anyong
 * @version V1.0
 * @Title: ${file_name}
 * @Package ${package_name}
 * @Description: TODO
 * @date ${date} ${time}
 */
@Controller
@RequestMapping("coach")
public class CoachInfoController {
//    private final static ArrayList<Integer> AllIds = new ArrayList<>();//获得所有不重复得数据
//    private static int allIdsSize;
    private ThreadLocalID threadLocalID = new ThreadLocalID();
    private ThreadLocal<ThreadLocalID> threadLocal = new ThreadLocal<>();
//    private  ArrayList<Integer> AllIds = new ArrayList<>();//获得所有不重复得数据
//    private  int allIdsSize;
    private static final int SUBSTR_BEGIN=7;//截取字符串的开始位置
    private static final int SUBSTR_BEGIN1=2;
    //考虑到AllIds是实例变量，并发访问会出现数据异常，采用ThreadLocal来避免

    @Resource(name = "coachInfoServiceImpl")
    private CoachInfoService coachService;
    @Resource(name = "playerServiceImpl1")
    private PlayerService playerService;
/**
* @author:YuanXin
* @Description:根据姓名查询教练的信息
* @Date: 16:11 2018/3/22/022
**/
    @RequestMapping("/findCoachByName")
    @ResponseBody
    public List<CoachInfo> findCoachByName(@RequestBody String coachName){
        //字符解码
        String decodeCoachName = null;
        try {
            decodeCoachName = URLDecoder.decode(coachName, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        String name = decodeCoachName.substring(decodeCoachName.indexOf("=") + 1);
        List<CoachInfo> coachInfos = coachService.findCoachByName(name);
        return coachInfos;
    }
    /**
    * @author:YuanXin
    * @Description:根据ID查询教练
    * @Date: 14:46 2018/3/22/022
    **/
    @RequestMapping("/findCoachById")
    @ResponseBody
    public CoachInfo findCoachById(String idCoach ){
        Integer id = Integer.parseInt(idCoach);
        CoachInfo coachInfo = coachService.findCoachById(id);
        return coachInfo;
    }
    /**
    * @author:YuanXin
    * @Description:根据多个条件查询学生
    * @Date: 16:11 2018/3/22/022
    **/
    @RequestMapping("/findPlayersByconditions")
    @ResponseBody
    public List<Player> findPlayersByconditions(@Param("playerCondition") PlayerCondition playerCondition) throws Exception {
        List<Player> players =playerService.findPlayersByconditions(playerCondition);
        return players;
    }
    /**
    * @author:YuanXin
    * @Description:根据球员ID查询对应的球员
    * @Date: 18:50 2018/3/22/022
    **/
    @RequestMapping("/findPlayerByPlayerId")
    @ResponseBody
    public Player findPlayerByPlayerId(Integer idPlayer ){
        Player player = playerService.findPlayerByPlayerId(idPlayer);
        return player;
    }
    /**
     * @author:YuanXin
     * @Description:获得所有得教练信息
     * @Date: 8:48 2018/3/23/023
     **/
    @RequestMapping("/findAllCoaches")
    @ResponseBody
    public List<CoachInfo> findAllCoaches() throws Exception {
        List<CoachInfo> coachInfos = coachService.findAllCoaches();
        return coachInfos;
    }
    /**
    * @author:YuanXin
    * @Description:通过球员得ids获得对应id得所有球员信息
    * @Date: 13:16 2018/3/23/023
    **/
    @RequestMapping("/getPlayersByIds")
    @ResponseBody
    public List<Player> getPlayersByIds(String total){
        return null;
    }
private Logger log = LoggerFactory.getLogger(getClass());
    @RequestMapping("/getAllPlayersByIds")
    @ResponseBody
    public List<Player> getAllPlayersByIds(String playerids,Integer flag){
        //用threadlocal来锁定ThreadLocalID对象
        threadLocal.set(threadLocalID);
        ThreadLocalID threadLocalID = threadLocal.get();
        List<Integer> AllIds = threadLocalID.getAllIds();
        if (flag==1){
            AllIds.clear();
        }
        //如果前端没有传入球员的id，就返回空
        if (playerids.equals("[]")){
            return null;
        }
        //解码过后得数据
        log.info(playerids);
        ArrayList<Integer> ids = new ArrayList<>();
        //定义一个临时变量来存储每一次多余得id
        ArrayList<Integer> newIds = new ArrayList<>();
        int allIdsSize = AllIds.size();
        if (playerids.indexOf("on")>0){
            //删除末尾的]
            int substrEnd = playerids.length() - 2;
            String substring = playerids.substring(SUBSTR_BEGIN,substrEnd);
            //删除字符串中多余的双引号
            substring = substring.replace("\"","");
            String[] split = substring.split(",");
            for (int i=0;i<split.length;i++){
                ids.add(Integer.parseInt(split[i]));
            }
            if (allIdsSize==0){
                AllIds.addAll(ids);
                newIds.addAll(AllIds);
            } else {
                //用newIds来存储与Allids中不同的元素
                for (int j=0;j<ids.size();j++){
                    if (!AllIds.contains(ids.get(j))){
                        newIds.add(ids.get(j));
                    }
                }
            }
            if (allIdsSize>0){
                //当有新的ids出现时，就要添加到ALLIds中
                if (newIds.size()>0){
                    for (int j=0;j<newIds.size();j++){
                        AllIds.add(newIds.get(j));
                    }
                }else {
                    //说明没有新添加的ids
                    return null;
                }
            }else {
                //说明没有新添加的ids
                if (newIds.size()==0){
                    return null;
                }
            }
        }else {
            //删除末尾的]
            int substrEnd = playerids.length() - 2;
            String substring = playerids.substring(SUBSTR_BEGIN1,substrEnd);
            //删除字符串中多余的双引号
            substring = substring.replace("\"","");
            String[] split = substring.split(",");
            for (int i=0;i<split.length;i++){
                ids.add(Integer.parseInt(split[i]));
            }
            if (allIdsSize==0){
                AllIds.addAll(ids);
                newIds.addAll(AllIds);
            } else {
                //用newIds来存储与Allids中不同的元素
                    for (int j=0;j<ids.size();j++){
                        if (!AllIds.contains(ids.get(j))){
                            newIds.add(ids.get(j));
                        }
                    }
            }
            if (allIdsSize>0){
                //当有新的ids出现时，就要添加到ALLIds中
                if (newIds.size()>0){
                    for (int j=0;j<newIds.size();j++){
                        AllIds.add(newIds.get(j));
                    }
                }else {
                    //说明没有新添加的ids
                    return null;
                }
            }else {
                    //说明没有新添加的ids
                if (newIds.size()==0){
                    return null;
                }

            }

        }
        List<Player> players = playerService.findPlayerByPlayerIds(newIds);
        return players;
    }
    /**
    * @author:YuanXin
    * @Description:根据id删除球员，更换状态位
    * @Date: 10:39 2018/3/26/026
    **/
    @RequestMapping("/deletePlayerById")
    public void deletePlayerById(Integer playerid){
        threadLocal.set(threadLocalID);
        ThreadLocalID threadLocalID = threadLocal.get();
        List<Integer> AllIds = threadLocalID.getAllIds();
        AllIds.remove(playerid);
    }
}
