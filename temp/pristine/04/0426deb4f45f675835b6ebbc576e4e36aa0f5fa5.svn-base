package cn.nsu.edu.web.four.services.common;

import cn.nsu.edu.web.four.beans.common.PhoneCode;
import cn.nsu.edu.web.four.config.BaseStatic;
import cn.nsu.edu.web.four.daos.redis.common.SmsDao;
import cn.nsu.edu.web.four.enums.Result;
import cn.nsu.edu.web.four.utils.code.CodeUtil;
import com.aliyuncs.IAcsClient;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;
import com.aliyuncs.exceptions.ClientException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;

/**
 * 短信服务
 */
public class SMSService {

    @Value("${sms.aliyun.template.json.code}")
    private String jsonCode;
    @Autowired
    private IAcsClient client;
    @Autowired
    private SendSmsRequest smsRequest;

    @Autowired
    private SmsDao dao;

    private String defaultMessage;

    private String returnMessage;



    private HashMap<String, Result> message;

//    public String getMessage() {
//        return returnMessage;
//    }

    public SMSService(){
        message = new HashMap<>();
        message.put("isv.BUSINESS_LIMIT_CONTROL",Result.SEND_PHONE_ERROR_COUNT);
    }

//    public void setDefaultMessage(String defaultMessage) {
//        this.defaultMessage = defaultMessage;
//    }

//    public void setMessage(HashMap<String, String> message) {
//        this.message = message;
//    }

    /**
     * 发送验证码
     * @param phone 对应的电话号码
     * @param request 请求，
     * @return 如果发送成功，返回Result.SUCCESS，发送次数达到上限，返回Result.SEND_PHONE_ERROR_COUNT,其余错误返回Result.SEND_PHONE_ERROR_OTHER
     * @see cn.nsu.edu.web.four.enums.Result
     */
    public Result createCode(String phone, HttpServletRequest request) {
        try {
            //生成验证码
            PhoneCode code = new PhoneCode();
            code.setPhone(phone);
            code.setCode(CodeUtil.createPhoneCode(6));

            smsRequest.setTemplateParam("{\"" + jsonCode + "\":\"" + code.getCode() + "\"}");
            SendSmsResponse sendSmsResponse = client.getAcsResponse(smsRequest);
            String responseCode = sendSmsResponse.getCode();
            if (responseCode != null) {
                if (responseCode.equals("OK")) {//发送成功，存储验证码
                    dao.setPhoneCode(code);
                    return Result.SUCCESS;
                } else {
//                    returnMessage = message.getOrDefault(sendSmsResponse.getCode(), defaultMessage);
                    return message.getOrDefault(responseCode,Result.SEND_PHONE_ERROR_OTHER);
                }
            }
        } catch (ClientException e) {
            e.printStackTrace();
            return Result.EXCEPTION;
        }
        return Result.SEND_PHONE_ERROR_OTHER;

    }

    /**
     * 验证手机验证码
     * @param phone 对应的手机号码
     * @param code 用户的验证码
     * @param request 请求
     * @return 如果验证码不存在，返回Result.CODE_NOT_EXISTS，<p>验证码不正确，返回Result.CODE_ERROR_COUNT，</p><p>验证码错误次数上限，返回Result.CODE_ERROR_COUNT，</p>验证成功，返回Result.SUCCESS
     * @see cn.nsu.edu.web.four.enums.Result
     *
     */
    public Result checkCode(String phone, String code, HttpServletRequest request) {

        //获取存储的code
        PhoneCode phoneCode = dao.getPhoneCode(phone);
        if (phoneCode == null) {
            returnMessage = "验证码不存在，或验证码已过期";
            return Result.CODE_NOT_EXISTS;
        }
        if (phoneCode.getCode().equals(code)) {
            if (phoneCode.getCount() >= BaseStatic.SMS_MAX_ERROR_COUNT) {
                returnMessage = "验证码错误次数已超过三次，请重新发送验证码";
                return Result.CODE_ERROR_COUNT;
            }
            return Result.SUCCESS;
        } else {
            phoneCode.setCount(phoneCode.getCount() + 1);
            returnMessage = "验证码错误";
            return Result.CODE_NOT_CORRECT;
        }

    }

}
